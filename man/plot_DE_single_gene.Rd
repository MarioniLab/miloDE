% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting_functions.R
\name{plot_DE_single_gene}
\alias{plot_DE_single_gene}
\title{plot_DE_single_gene}
\usage{
plot_DE_single_gene(
  x,
  de_stat,
  gene,
  alpha = 0.1,
  layout = "UMAP",
  subset_nhoods = NULL,
  set_na_to_0 = TRUE,
  ...
)
}
\arguments{
\item{x}{A \code{\linkS4class{Milo}} object.}

\item{de_stat}{miloDE stat (output of \code{\link{de_test_neighbourhoods}}).
It does not have to be direct output of \code{\link{de_test_neighbourhoods}} i.e. it is allowed if \code{de_stat} has some additional assays/columns (e.g. calculated post hoc metrics on neighbourhoods/genes).}

\item{gene}{A character specifying gene.}

\item{alpha}{A scalar (between 0 and 1) specifying the significance level used. Default \code{alpha = 0.1}.}

\item{layout}{A character indicating the name of the \code{reducedDim} slot in the \code{\linkS4class{Milo}} object to use for layout. Default \code{layout = "UMAP"}.}

\item{subset_nhoods}{A vector (or NULL) specifying which neighbourhoods will be plotted.
Default \code{subset_nhoods = NULL} meaning that no subsetting is performed.
If not NULL, should be a numeric vector, which values lie within \code{c(1:ncol(nhoods(x)))}.}

\item{set_na_to_0}{Boolean specifying whether in neighbourhoods in which gene is not tested, logFC would be set to 0 and p-values to 1.
Default \code{set_na_to_0 = TRUE}, and in this case, they will be coloured in white (otherwise gray).}

\item{...}{Arguments to pass to \code{plot_milo_by_single_metric} (e.g. \code{size_range}, \code{node_stroke} etc)).}
}
\value{
\sQuote{Neighbourhood} plot, in which each neighbourhood is coloured by logFC for the selected gene (if significant)
}
\description{
Returns \sQuote{neighbourhood} plot; each node is coloured by logFC, if \code{pval_corrected_across_nhoods < alpha}.
}
\examples{
require(SingleCellExperiment)
n_row = 500
n_col = 100
n_latent = 5
sce = SingleCellExperiment(assays =
list(counts = floor(matrix(rnorm(n_row*n_col), ncol=n_col)) + 4))
rownames(sce) = as.factor(1:n_row)
colnames(sce) = c(1:n_col)
sce$cell = colnames(sce)
sce$sample = floor(runif(n = n_col , min = 1 , max = 5))
sce$type = ifelse(sce$sample \%in\% c(1,2) , "ref" , "query")
reducedDim(sce , "reduced_dim") =
matrix(rnorm(n_col*n_latent), ncol=n_latent)
sce = assign_neighbourhoods(sce,
reducedDim_name = "reduced_dim")
de_stat = de_test_neighbourhoods(sce ,
design = ~type , covariates = c("type") )
umaps = as.data.frame(matrix(rnorm(n_col*2), ncol=2))
colnames(umaps) = c("V1" , "V2")
reducedDim(sce , "UMAP") = umaps
p = plot_DE_single_gene(sce, de_stat , gene = "1")

}
