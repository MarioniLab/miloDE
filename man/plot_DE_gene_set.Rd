% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting_functions.R
\name{plot_DE_gene_set}
\alias{plot_DE_gene_set}
\title{plot_DE_gene_set}
\usage{
plot_DE_gene_set(
  x,
  de_stat,
  genes,
  logFC_correction = TRUE,
  correction_by = "pval_corrected_across_nhoods",
  alpha = 0.1,
  layout = "UMAP",
  subset_nhoods = NULL,
  ...
)
}
\arguments{
\item{x}{Milo object}

\item{de_stat}{milo-DE stat (output of 'de_stat_neighbourhoods')}

\item{genes}{Character vector, each element corresponds to gene ID}

\item{logFC_correction}{Boolean specifying whether to perfrom logFC correction. If TRUE (default), logFC will be set to 0 if corrected pvalue (defined by 'correction_by' variable) < alpha}

\item{correction_by}{Character - colname from de_stat - specifying which column to use to decide on significance for logFC. Relevant only if logFC_correction = TRUE.}

\item{alpha}{A numeric between 0 and 1 specifying the threshold for correction}

\item{layout}{A character indicating the name of the \code{reducedDim} slot in the \code{\linkS4class{Milo}} object to use for layout (default: 'UMAP')}

\item{subset_nhoods}{A vector (or NULL) specifying which neighbourhoods will be plotted. Default = NULL meaning that all neighbourhoods will be plotted}

\item{...}{Arguments to pass to \code{plot_milo_by_single_metric} (e.g. size_range, node_stroke etc))}
}
\value{
ggplot object - 'neighbourhood' plot, in which each neighbourhood is coloured by average logFC across the selected genes; neighbourhood size corresponds to the fraction of genes that are DE in this neighbourhood.
}
\description{
Returns Milo plot, in which colour of nodes correposnd to average logFC across selected genes; size corresponds to how many genes show significant DE in the neighbourhood (based on pval_corrected_across_nhoods)
}
\examples{
require(SingleCellExperiment)
n_row = 500
n_col = 100
n_latent = 5
sce = SingleCellExperiment(assays =
list(counts = floor(matrix(rnorm(n_row*n_col), ncol=n_col)) + 4))
rownames(sce) = as.factor(1:n_row)
colnames(sce) = c(1:n_col)
sce$cell = colnames(sce)
sce$sample = floor(runif(n = n_col , min = 1 , max = 5))
sce$type = ifelse(sce$sample \%in\% c(1,2) , "ref" , "query")
reducedDim(sce , "reduced_dim") =
matrix(rnorm(n_col*n_latent), ncol=n_latent)
sce = assign_neighbourhoods(sce, reducedDim_name = "reduced_dim")
de_stat = de_test_neighbourhoods(sce ,
design = ~type , covariates = c("type") )
umaps = as.data.frame(matrix(rnorm(n_col*2), ncol=2))
colnames(umaps) = c("V1" , "V2")
reducedDim(sce , "UMAP") = umaps
genes = c("1","2")
p = plot_DE_gene_set(sce, de_stat , genes = c("1","2"))

}
