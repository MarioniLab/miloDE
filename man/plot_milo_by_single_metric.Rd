% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting_functions.R
\name{plot_milo_by_single_metric}
\alias{plot_milo_by_single_metric}
\title{plot_milo_by_single_metric}
\usage{
plot_milo_by_single_metric(
  x,
  nhood_stat,
  colour_by = "logFC",
  significance_by = NULL,
  order_by = NULL,
  order_direction = FALSE,
  size_by = NULL,
  alpha = 0.1,
  layout = "UMAP",
  subset_nhoods = NULL,
  size_range = c(1, 3),
  node_stroke = 0.3,
  edge_width = c(0.2, 0.5),
  edge_weight.thresh = NULL
)
}
\arguments{
\item{x}{A \code{\linkS4class{Milo}} object.}

\item{nhood_stat}{\code{data.frame} object, containing columns \code{Nhood} (should correspond to neighbourhoods from \code{nhoodGraph(x))}.}

\item{colour_by}{A character specifying value used for neighbourhood colouring. Should be in \code{colnames(nhood_stat)}. Can be both numeric and categorical.}

\item{significance_by}{A character specifying which values to use for \sQuote{thresholding}: if values for this column exceed \code{alpha}, \code{colour_by} will be set to 0.
Should be in \code{colnames(nhood_stat)}. Default \code{significance_by = NULL} and in this case we will not use no correction.
Please ensure that its values are numeric.}

\item{order_by}{A character specifying which values to use to order neighbourhoods for plotting.
Should be in \code{colnames(nhood_stat)} (or NULL). Default \code{order_by = NULL} and in this case we will order by \code{size_by} values.}

\item{order_direction}{Boolean specifying the direction of neighbourhood ordering. Default \code{order_direction = FALSE}.}

\item{size_by}{A character specifying which values to use for neighbourhood sizes.
Should be in \code{colnames(nhood_stat)} (or NULL). Default \code{size_by = NULL} and in this case we will use neighbourhood size (i.e. number of cells in the neighbourhood).
Please ensure that its values are numeric.}

\item{alpha}{A scalar (between 0 and 1) specifying the significance level used. Default \code{alpha = 0.1}.}

\item{layout}{A character indicating the name of the \code{reducedDim} slot in the \code{\linkS4class{Milo}} object to use for layout. Default \code{layout = "UMAP"}.}

\item{subset_nhoods}{A vector (or NULL) specifying which neighbourhoods will be plotted.
Default \code{subset_nhoods = NULL} meaning that no subsetting is performed. If not NULL, should be a numeric vector, which values lie within \code{c(1:ncol(nhoods(x)))}.}

\item{size_range}{A numeric vector indicating the range (min and max) of node sizes to use for plotting (to avoid overplotting in the graph).
Default \code{size_range = c(1,3)}.}

\item{node_stroke}{A numeric indicating the desired thickness of the border around each node. Default \code{node_stroke = 0.3}.}

\item{edge_width}{A numeric vector indicating the range (min and max) of edge widths to use for plotting. Default \code{edge_width = c(0.2,0.5)}.}

\item{edge_weight.thresh}{A numeric (or NULL) specifying a threshold for minimum cells in common (between neighbourhoods) required for an edge to be plotted.
Default \code{edge_weight.thresh = NULL} meaning that no minimum threshold is set.}
}
\value{
\sQuote{Neighbourhood} plot (\code{ggplot} object), in which each neighbourhood is coloured by the provided in \code{colour_by} column value
}
\description{
Returns \sQuote{neighbourhood} plot; each node is coloured by \code{colour_by} column from \code{nhood_stat}, if \code{significance_by < alpha}
}
\examples{
require(SingleCellExperiment)
n_row = 500
n_col = 100
n_latent = 5
sce = SingleCellExperiment(assays =
list(counts = floor(matrix(rnorm(n_row*n_col), ncol=n_col)) + 4))
rownames(sce) = as.factor(1:n_row)
colnames(sce) = c(1:n_col)
sce$cell = colnames(sce)
sce$sample = floor(runif(n = n_col , min = 1 , max = 5))
sce$type = ifelse(sce$sample \%in\% c(1,2) , "ref" , "query")
reducedDim(sce , "reduced_dim") = matrix(rnorm(n_col*n_latent), ncol=n_latent)
sce = assign_neighbourhoods(sce,
reducedDim_name = "reduced_dim")
de_stat = de_test_neighbourhoods(sce ,
design = ~type , covariates = c("type") )
de_stat = de_stat[de_stat$gene == "1", ]
umaps = as.data.frame(matrix(rnorm(n_col*2), ncol=2))
colnames(umaps) = c("V1" , "V2")
reducedDim(sce , "UMAP") = umaps
p = plot_milo_by_single_metric(sce, de_stat)

}
